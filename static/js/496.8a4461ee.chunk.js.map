{"version":3,"file":"static/js/496.8a4461ee.chunk.js","mappings":"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","sources":["utils/utilsFunctions.js","components/ArticlesList.jsx","components/Pagination.jsx","hooks/useFetchAllData.jsx","pages/Home.jsx","redux/data/data-selector.js"],"sourcesContent":["const months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport function getDateMonth(date) {\n  const year = date.slice(0, 4);\n  const month = months[Number(date.slice(5, 7)) - 1];\n  const day = date.slice(8, 10);\n\n  return `${month} ${day}th, ${year}`;\n}\n","import {\n  Card,\n  CardBody,\n  CardFooter,\n  Box,\n  Text,\n  Heading,\n  Image,\n  SimpleGrid,\n  Highlight,\n} from '@chakra-ui/react';\nimport { CalendarIcon, ArrowForwardIcon } from '@chakra-ui/icons';\nimport { useSelector } from 'react-redux';\nimport { selectData } from 'redux/data/data-selector';\nimport { getDateMonth } from 'utils/utilsFunctions';\nimport { NavLink } from 'react-router-dom';\n\nconst ArticlesList = ({ location, query }) => {\n  const data = useSelector(selectData);\n\n  const trimedText = text => {\n    if (text.length < 100) {\n      return text;\n    }\n    const slicedText = text.slice(0, 100) + ' ...';\n    return slicedText;\n  };\n\n  return (\n    <Box my=\"12\">\n      <SimpleGrid minChildWidth=\"sm\" spacing=\"10\">\n        {data.length === 0 && (\n          <Heading as=\"h1\" textAlign=\"center\">\n            Nothing was found, try to change a query field{' '}\n          </Heading>\n        )}\n        {data.map(({ id, title, imageUrl, summary, publishedAt }) => (\n          <Card\n            key={id}\n            maxW=\"sm\"\n            transition=\"box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\"\n            _hover={{ boxShadow: 'dark-lg', rounded: 'md' }}\n          >\n            <NavLink to={`article/${id}`} state={{ from: location }}>\n              <CardBody p=\"0\">\n                <Image\n                  src={imageUrl}\n                  alt=\"Article preview image\"\n                  fallbackSrc=\"https://via.placeholder.com/400x250\"\n                  width=\"400px\"\n                  height=\"217px\"\n                  objectFit=\"cover\"\n                  objectPosition=\"50% 20%\"\n                  borderTopRadius=\"lg\"\n                />\n              </CardBody>\n              <Box p=\"6\">\n                <Box display=\"flex\" justifyContent=\"start\" alignItems=\"center\">\n                  <CalendarIcon />\n                  <Text ml=\"2.5\">{getDateMonth(publishedAt)}</Text>\n                </Box>\n                <Heading size=\"md\" mt=\"6\">\n                  <Highlight\n                    query={query}\n                    styles={{\n                      py: '1',\n                      px: '0.5',\n                      bg: 'yellow.300',\n                    }}\n                  >\n                    {title}\n                  </Highlight>\n                </Heading>\n                <Text mt=\"5\">\n                  <Highlight\n                    query={query}\n                    styles={{\n                      py: '1',\n                      px: '0.5',\n                      bg: 'yellow.300',\n                    }}\n                  >\n                    {trimedText(summary)}\n                  </Highlight>\n                </Text>\n                <CardFooter p=\"0\">\n                  <Text mt=\"5\" _hover={{ textDecoration: 'underline' }}>\n                    Read more <ArrowForwardIcon mx=\"2px\" />\n                  </Text>\n                </CardFooter>\n              </Box>\n            </NavLink>\n          </Card>\n        ))}\n      </SimpleGrid>\n    </Box>\n  );\n};\n\nexport default ArticlesList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectCurrentPage,\n  getPaginationArray,\n} from 'redux/data/data-selector';\nimport { Box } from '@chakra-ui/react';\nimport { setCurrentPage } from 'redux/data/data-slice';\n\nconst Pagination = () => {\n  const currentPage = useSelector(selectCurrentPage);\n\n  const dispatch = useDispatch();\n\n  const pageCount = useSelector(getPaginationArray);\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" mt=\"6\" alignItems=\"center\">\n      {pageCount.map(i =>\n        i === currentPage && pageCount.length !== 1 ? (\n          <Box\n            onClick={() => {\n              dispatch(setCurrentPage(i - 1));\n            }}\n            as=\"button\"\n            borderRadius=\"md\"\n            w=\"40px\"\n            h=\"40px\"\n            key={i}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            bgColor=\"blue.600\"\n            color=\"whiteAlpha.900\"\n          >\n            {i}\n          </Box>\n        ) : (\n          <Box\n            onClick={() => {\n              dispatch(setCurrentPage(i));\n            }}\n            w=\"40px\"\n            h=\"40px\"\n            as=\"button\"\n            key={i}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            {i}\n          </Box>\n        )\n      )}\n    </Box>\n  );\n};\n\nexport default Pagination;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchAlldata } from 'redux/data/data-operations';\nimport {\n  selectCurrentPage,\n  selectPerPage,\n  totalCountOfData,\n} from 'redux/data/data-selector';\nimport { useState } from 'react';\nimport { setCurrentPage } from 'redux/data/data-slice';\nimport { useCallback } from 'react';\n\nconst useFetchAllData = () => {\n  const [filter, setFilter] = useState('');\n\n  const dispatch = useDispatch();\n\n  const currentPage = useSelector(selectCurrentPage);\n  const perPage = useSelector(selectPerPage);\n  const limit = useSelector(totalCountOfData);\n\n  useEffect(() => {\n    dispatch(\n      fetchAlldata({\n        perPage,\n        currentPage: currentPage - 1,\n        limit,\n        filter,\n      })\n    );\n  }, [dispatch, currentPage, perPage, limit, filter]);\n\n  const chageFilterHandler = useCallback(\n    evt => {\n      dispatch(setCurrentPage(1));\n      setFilter(evt.target.value);\n    },\n    [dispatch]\n  );\n\n  return { filter, chageFilterHandler, limit };\n};\n\nexport default useFetchAllData;\n","import {\n  Box,\n  Text,\n  InputGroup,\n  InputLeftElement,\n  Input,\n  Divider,\n  Heading,\n} from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\nimport ArticlesList from '../components/ArticlesList';\nimport Pagination from 'components/Pagination';\nimport { useLocation } from 'react-router-dom';\nimport { selectError, selectIsLoading } from 'redux/data/data-selector';\nimport { Blocks } from 'react-loader-spinner';\nimport useFetchAllData from 'hooks/useFetchAllData';\nimport { useSelector } from 'react-redux';\n\nconst Home = () => {\n  const location = useLocation();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const { filter, chageFilterHandler, limit } = useFetchAllData();\n  return (\n    <Box py=\"14\" maxW=\"container.xl\" mx=\"auto\">\n      <Box mb=\"10\">\n        <Text>Filter by keywords</Text>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<Search2Icon color=\"gray.300\" />}\n          />\n          <Input\n            value={filter}\n            type=\"text\"\n            placeholder=\"Enter your query...\"\n            onChange={chageFilterHandler}\n          />\n        </InputGroup>\n      </Box>\n      <Box>\n        <Text>Results: {limit}</Text>\n        <Divider />\n      </Box>\n      {isLoading ? (\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Blocks\n            visible={true}\n            height=\"150\"\n            width=\"150\"\n            ariaLabel=\"blocks-loading\"\n            wrapperClass=\"blocks-wrapper\"\n          />\n        </Box>\n      ) : (\n        <>\n          {!error ? (\n            <ArticlesList location={location} query={filter} />\n          ) : (\n            <Heading as=\"h1\" textAlign=\"center\">\n              Something goes wrong, try reload the page !\n            </Heading>\n          )}\n        </>\n      )}\n\n      <Pagination />\n    </Box>\n  );\n};\n\nexport default Home;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectData = state => state.data.data;\n\nexport const selectIsLoading = state => state.data.isLoading;\n\nexport const selectError = state => state.data.error;\n\nexport const selectSingleArticleData = state => state.data.singleArticle;\n\nexport const selectCurrentPage = state => state.data.currentPage;\nexport const selectPerPage = state => state.data.perPage;\n\nexport const totalCountOfData = state => state.data.totalCountOfRequest;\n\nexport const getPaginationArray = createSelector(\n  [totalCountOfData, selectPerPage],\n  (totalCount, perPage) =>\n    totalCount <= perPage\n      ? [1]\n      : Array.from({ length: totalCount / perPage }, (_, i) => i + 1)\n);\n"],"names":["months","getDateMonth","date","year","slice","month","Number","day","location","query","data","useSelector","selectData","my","minChildWidth","spacing","length","as","textAlign","map","text","id","title","imageUrl","summary","publishedAt","maxW","transition","_hover","boxShadow","rounded","to","state","from","p","src","alt","fallbackSrc","width","height","objectFit","objectPosition","borderTopRadius","display","justifyContent","alignItems","ml","size","mt","styles","py","px","bg","textDecoration","mx","currentPage","selectCurrentPage","dispatch","useDispatch","pageCount","getPaginationArray","i","onClick","setCurrentPage","borderRadius","w","h","bgColor","color","useState","filter","setFilter","perPage","selectPerPage","limit","totalCountOfData","useEffect","fetchAlldata","chageFilterHandler","useCallback","evt","target","value","useLocation","isLoading","selectIsLoading","error","selectError","useFetchAllData","mb","pointerEvents","children","I","type","placeholder","onChange","visible","ariaLabel","wrapperClass","selectSingleArticleData","singleArticle","totalCountOfRequest","createSelector","totalCount","Array","_"],"sourceRoot":""}